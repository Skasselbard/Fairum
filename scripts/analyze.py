import subprocess
import lola
import argparse
import re
from graphviz import Source as dot


def general_deadlock():
    net = "net.lola"
    formula = '--formula=EF (DEADLOCK AND p_0 = 0 AND p_2 = 0)'
    lola.cd_root()
    subprocess.call(["./target/lola/lola-2.0/src/lola", net, formula, "-p"])

def total_deadlock():
    net = "net.lola"
    formula = '--formula=EF DEADLOCK'
    lola.cd_root()
    subprocess.call(["./target/lola/lola-2.0/src/lola", net, formula, "-p"])

def neighbors(nodes):
    #nodes_regex = [node + "\W" for node in nodes]
    neighbors = []
    # search all given nodes
    for node in nodes:
        matches = []
        # search all lines for the current node
        for line in open('./net.dot', 'r'):
            if re.search(node + "\W", line):
                matches.append(line)
        # search for the arc definitions in the previously matched lines
        for match in matches:
            if re.search("->", match):
                match = match.replace("\n", "")
                match = match.replace(";", "")
                match = match.replace(node, "")
                match = match.replace("->", "")
                match = match.replace(" ", "")
                neighbors.append(match)
    # match all lines that contain nodes and neighbors
    lines = ["digraph petrinet {"]
    # join initial nodes and neighbors saparated by a '|'. Also add a \W to every element
    regex = "|".join([e + "\W" for e in nodes + neighbors])
    for line in open('./net.dot', 'r'):
        if re.search(regex, line):
            lines.append(line)
    lines.append("}")
    print("".join(lines))
    file=open('neighbors.dot','w')
    file.writelines(lines)
    file.close()
    visualize('neighbors.dot')

def visualize(file):
    dot.from_file(file).render(view=True, format="png")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="analyze the output generated by granite")
    parser.add_argument('-d', action="store_true", help="Default search for deadlocks. Successful and unsuccessful termination is not concidered as a deadlock")
    parser.add_argument('-t', action="store_true", help="Search for every deadlock. Even program termination is concidered a deadlock")
    parser.add_argument('-n', nargs="*", help="Generates a subnet with the given nodes and all its neighbors and visualizes it.")
    parser.add_argument('-v', action="store_true", help="visualize the graph in graphviz. Doesn't terminate (in time) for larger graphs")


    args = parser.parse_args()

    if args.d:
        general_deadlock()
    if args.t:
        total_deadlock()
    if args.n:
        neighbors(args.n)
    if args.v:
        visualize("net.dot")
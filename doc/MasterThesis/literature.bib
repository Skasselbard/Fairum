Rust
@article{Matsakis:2014:RL:2692956.2663188,
 author = {Matsakis, Nicholas D. and Klock,II, Felix S.},
 title = {The Rust Language},
 journal = {Ada Lett.},
 issue_date = {December 2014},
 volume = {34},
 number = {3},
 month = oct,
 year = {2014},
 issn = {1094-3641},
 pages = {103--104},
 numpages = {2},
 url = {http://doi.acm.org/10.1145/2692956.2663188},
 doi = {10.1145/2692956.2663188},
 acmid = {2663188},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {affine type systems, memory management, rust, systems programming},
} 
Mathematical proof of correctness for Rust
@article{Jung:2017:RSF:3177123.3158154,
 author = {Jung, Ralf and Jourdan, Jacques-Henri and Krebbers, Robbert and Dreyer, Derek},
 title = {RustBelt: Securing the Foundations of the Rust Programming Language},
 journal = {Proc. ACM Program. Lang.},
 issue_date = {January 2018},
 volume = {2},
 number = {POPL},
 month = dec,
 year = {2017},
 issn = {2475-1421},
 pages = {66:1--66:34},
 articleno = {66},
 numpages = {34},
 url = {http://doi.acm.org/10.1145/3158154},
 doi = {10.1145/3158154},
 acmid = {3158154},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Rust, concurrency, logical relations, separation logic, type systems},
} 

PNML
@InProceedings{pnml,
author="Billington, Jonathan
and Christensen, S{\o}ren
and van Hee, Kees
and Kindler, Ekkart
and Kummer, Olaf
and Petrucci, Laure
and Post, Reinier
and Stehno, Christian
and Weber, Michael",
editor="van der Aalst, Wil M. P.
and Best, Eike",
title="The Petri Net Markup Language: Concepts, Technology, and Tools",
booktitle="Applications and Theory of Petri Nets 2003",
year="2003",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="483--505",
abstract="The Petri Net Markup Language (PNML) is an XML-based interchange format for Petri nets. In order to support different versions of Petri nets and, in particular, future versions of Petri nets, PNML allows the definition of Petri net types.Due to this flexibility, PNML is a starting point for a standard interchange format for Petri nets. This paper discusses the design principles, the basic concepts, and the underlying XML technology of PNML. The main purpose of this paper is to disseminate the ideas of PNML and to stimulate discussion on and contributions to a standard Petri net interchange format.",
isbn="978-3-540-44919-5"
}

PNML Standard
@article{kindler2006petri,
  title={The petri net markup language and iso/iec 15909-2: Concepts, status, and future directions},
  author={Kindler, Ekkart},
  journal={Entwurf komplexer Automatisierungssysteme},
  volume={9},
  pages={35--55},
  year={2006}
}
PNML Standard extended
@article{hillah2009primer,
  title={A primer on the Petri Net Markup Language and ISO/IEC 15909-2},
  author={Hillah, Lom M and Kindler, Ekkart and Kordon, Fabrice and Petrucci, Laure and Treves, Nicolas and others},
  journal={Petri Net Newsletter},
  volume={76},
  pages={9--28},
  year={2009},
  publisher={Gesellschaft f{\"u}r Informatik, Germany}
}

Drachenbuch
@article{aho1986compilers,
  title={Compilers, principles, techniques},
  author={Aho, Alfred V and Sethi, Ravi and Ullman, Jeffrey D},
  journal={Addison wesley},
  volume={7},
  number={8},
  pages={9}
}

@online{rustSite,
  author = {Rust Team},
  title = {Rust Website},
  year = 2020,
  url = {https://web.archive.org/web/20200119174448/https://www.rust-lang.org/},
  urldate = {2020-01-19}
}

@book{klabnik2018rust,
  title={The Rust Programming Language},
  author={Klabnik, Steve and Nichols, Carol},
  year={2018},
  publisher={No Starch Press},
  url = {https://web.archive.org/web/20190929000131/https://doc.rust-lang.org/book/}
}

@online{nomicon,
  author = {Rust Team},
  title = {Nomicon},
  year = 2019,
  url = {https://web.archive.org/web/20191013065400/https://doc.rust-lang.org/nomicon/},
  urldate = {2019-10-13}
}

Microsoft memory problems
@article{miller2019trends,
  title={Trends, challenge, and shifts in software vulnerability mitigation},
  author={Miller, M},
  journal={Microsoft},
  year={2019},
  url = {https://github.com/microsoft/MSRC-Security-Research/tree/master/presentations/2019_02_BlueHatIL}
}

Microsoft memory problems
@article{gavin2019secureCode,
  title={A proactive approach to more secure code},
  author={Thomas, Gavin},
  journal={Microsoft},
  year={2019},
  url = {https://msrc-blog.microsoft.com/2019/07/16/a-proactive-approach-to-more-secure-code/}
}

Speed vs Safety vs Compile time warnings
@online{speedSafety,
  author = {Klabnik, Steve},
  title = {Rust, WebAssembly, and the future of Serverless},
  year = 2019,
  url = {https://youtu.be/CMB6AlE1QuI?t=369},
  urldate = {2020-01-24}
}

Model Checking
@book{baier2008principles,
  title={Principles of model checking},
  author={Baier, Christel and Katoen, Joost-Pieter},
  year={2008},
  publisher={MIT press},
  url={https://www.academia.edu/download/30717533/_principles_of_model_checking.pdf}
}

Model checking 2
@incollection{mcmillan1993symbolic,
  title={Symbolic model checking},
  author={McMillan, Kenneth L},
  booktitle={Symbolic Model Checking},
  pages={25--60},
  year={1993},
  publisher={Springer}
}

state explosion counters
@inproceedings{clarke2011model,
  title={Model checking and the state explosion problem},
  author={Clarke, Edmund M and Klieber, William and Nov{\'a}{\v{c}}ek, Milo{\v{s}} and Zuliani, Paolo},
  booktitle={LASER Summer School on Software Engineering},
  pages={1--30},
  year={2011},
  organization={Springer}
}

petri netze
@article{petri1962kommunikation,
  title={Kommunikation mit automaten},
  author={Petri, Carl Adam},
  year={1962}
}

@online{rustc,
  author = {Rust Team},
  title = {Rust-lang Project},
  year = 2020,
  url = {https://github.com/rust-lang/rust},
  urldate = {2020-02-04}
}

@online{rustc-guide,
  author = {Rust Team},
  title = {Rustc Guide},
  year = 2020,
  url = {https://rust-lang.github.io/rustc-guide/},
  urldate = {2020-02-04}
}

@online{rustc-doc,
  author = {Rust Team},
  title = {Rustc Documentation},
  year = 2020,
  url = {https://doc.rust-lang.org/nightly/nightly-rustc/rustc/},
  urldate = {2020-02-04}
}